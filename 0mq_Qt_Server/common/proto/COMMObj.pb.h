// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: COMMObj.proto

#ifndef PROTOBUF_COMMObj_2eproto__INCLUDED
#define PROTOBUF_COMMObj_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace COMMObj {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_COMMObj_2eproto();
void protobuf_AssignDesc_COMMObj_2eproto();
void protobuf_ShutdownFile_COMMObj_2eproto();

class COMMObj;

// ===================================================================

class COMMObj : public ::google::protobuf::Message {
 public:
  COMMObj();
  virtual ~COMMObj();

  COMMObj(const COMMObj& from);

  inline COMMObj& operator=(const COMMObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COMMObj& default_instance();

  void Swap(COMMObj* other);

  // implements Message ----------------------------------------------

  COMMObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COMMObj& from);
  void MergeFrom(const COMMObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline const ::std::string& operate() const;
  inline void set_operate(const ::std::string& value);
  inline void set_operate(const char* value);
  inline void set_operate(const char* value, size_t size);
  inline ::std::string* mutable_operate();
  inline ::std::string* release_operate();
  inline void set_allocated_operate(::std::string* operate);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string tab_name = 3;
  inline bool has_tab_name() const;
  inline void clear_tab_name();
  static const int kTabNameFieldNumber = 3;
  inline const ::std::string& tab_name() const;
  inline void set_tab_name(const ::std::string& value);
  inline void set_tab_name(const char* value);
  inline void set_tab_name(const char* value, size_t size);
  inline ::std::string* mutable_tab_name();
  inline ::std::string* release_tab_name();
  inline void set_allocated_tab_name(::std::string* tab_name);

  // required string site = 4;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 4;
  inline const ::std::string& site() const;
  inline void set_site(const ::std::string& value);
  inline void set_site(const char* value);
  inline void set_site(const char* value, size_t size);
  inline ::std::string* mutable_site();
  inline ::std::string* release_site();
  inline void set_allocated_site(::std::string* site);

  // required string byte_data = 5;
  inline bool has_byte_data() const;
  inline void clear_byte_data();
  static const int kByteDataFieldNumber = 5;
  inline const ::std::string& byte_data() const;
  inline void set_byte_data(const ::std::string& value);
  inline void set_byte_data(const char* value);
  inline void set_byte_data(const char* value, size_t size);
  inline ::std::string* mutable_byte_data();
  inline ::std::string* release_byte_data();
  inline void set_allocated_byte_data(::std::string* byte_data);

  // repeated string field_name = 6;
  inline int field_name_size() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 6;
  inline const ::std::string& field_name(int index) const;
  inline ::std::string* mutable_field_name(int index);
  inline void set_field_name(int index, const ::std::string& value);
  inline void set_field_name(int index, const char* value);
  inline void set_field_name(int index, const char* value, size_t size);
  inline ::std::string* add_field_name();
  inline void add_field_name(const ::std::string& value);
  inline void add_field_name(const char* value);
  inline void add_field_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& field_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field_name();

  // optional int32 row_begin = 7 [default = -1];
  inline bool has_row_begin() const;
  inline void clear_row_begin();
  static const int kRowBeginFieldNumber = 7;
  inline ::google::protobuf::int32 row_begin() const;
  inline void set_row_begin(::google::protobuf::int32 value);

  // optional int32 row_size = 8 [default = -1];
  inline bool has_row_size() const;
  inline void clear_row_size();
  static const int kRowSizeFieldNumber = 8;
  inline ::google::protobuf::int32 row_size() const;
  inline void set_row_size(::google::protobuf::int32 value);

  // optional string type = 9 [default = "obj"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:COMMObj.COMMObj)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_tab_name();
  inline void clear_has_tab_name();
  inline void set_has_site();
  inline void clear_has_site();
  inline void set_has_byte_data();
  inline void clear_has_byte_data();
  inline void set_has_row_begin();
  inline void clear_has_row_begin();
  inline void set_has_row_size();
  inline void clear_has_row_size();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* operate_;
  ::std::string* username_;
  ::std::string* tab_name_;
  ::std::string* site_;
  ::std::string* byte_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field_name_;
  ::google::protobuf::int32 row_begin_;
  ::google::protobuf::int32 row_size_;
  ::std::string* type_;
  static ::std::string* _default_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_COMMObj_2eproto();
  friend void protobuf_AssignDesc_COMMObj_2eproto();
  friend void protobuf_ShutdownFile_COMMObj_2eproto();

  void InitAsDefaultInstance();
  static COMMObj* default_instance_;
};
// ===================================================================


// ===================================================================

// COMMObj

// required string operate = 1;
inline bool COMMObj::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COMMObj::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COMMObj::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COMMObj::clear_operate() {
  if (operate_ != &::google::protobuf::internal::kEmptyString) {
    operate_->clear();
  }
  clear_has_operate();
}
inline const ::std::string& COMMObj::operate() const {
  return *operate_;
}
inline void COMMObj::set_operate(const ::std::string& value) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::kEmptyString) {
    operate_ = new ::std::string;
  }
  operate_->assign(value);
}
inline void COMMObj::set_operate(const char* value) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::kEmptyString) {
    operate_ = new ::std::string;
  }
  operate_->assign(value);
}
inline void COMMObj::set_operate(const char* value, size_t size) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::kEmptyString) {
    operate_ = new ::std::string;
  }
  operate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_operate() {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::kEmptyString) {
    operate_ = new ::std::string;
  }
  return operate_;
}
inline ::std::string* COMMObj::release_operate() {
  clear_has_operate();
  if (operate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operate_;
    operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COMMObj::set_allocated_operate(::std::string* operate) {
  if (operate_ != &::google::protobuf::internal::kEmptyString) {
    delete operate_;
  }
  if (operate) {
    set_has_operate();
    operate_ = operate;
  } else {
    clear_has_operate();
    operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string username = 2;
inline bool COMMObj::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COMMObj::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COMMObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COMMObj::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& COMMObj::username() const {
  return *username_;
}
inline void COMMObj::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void COMMObj::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void COMMObj::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* COMMObj::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COMMObj::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string tab_name = 3;
inline bool COMMObj::has_tab_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void COMMObj::set_has_tab_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void COMMObj::clear_has_tab_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void COMMObj::clear_tab_name() {
  if (tab_name_ != &::google::protobuf::internal::kEmptyString) {
    tab_name_->clear();
  }
  clear_has_tab_name();
}
inline const ::std::string& COMMObj::tab_name() const {
  return *tab_name_;
}
inline void COMMObj::set_tab_name(const ::std::string& value) {
  set_has_tab_name();
  if (tab_name_ == &::google::protobuf::internal::kEmptyString) {
    tab_name_ = new ::std::string;
  }
  tab_name_->assign(value);
}
inline void COMMObj::set_tab_name(const char* value) {
  set_has_tab_name();
  if (tab_name_ == &::google::protobuf::internal::kEmptyString) {
    tab_name_ = new ::std::string;
  }
  tab_name_->assign(value);
}
inline void COMMObj::set_tab_name(const char* value, size_t size) {
  set_has_tab_name();
  if (tab_name_ == &::google::protobuf::internal::kEmptyString) {
    tab_name_ = new ::std::string;
  }
  tab_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_tab_name() {
  set_has_tab_name();
  if (tab_name_ == &::google::protobuf::internal::kEmptyString) {
    tab_name_ = new ::std::string;
  }
  return tab_name_;
}
inline ::std::string* COMMObj::release_tab_name() {
  clear_has_tab_name();
  if (tab_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tab_name_;
    tab_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COMMObj::set_allocated_tab_name(::std::string* tab_name) {
  if (tab_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tab_name_;
  }
  if (tab_name) {
    set_has_tab_name();
    tab_name_ = tab_name;
  } else {
    clear_has_tab_name();
    tab_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string site = 4;
inline bool COMMObj::has_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void COMMObj::set_has_site() {
  _has_bits_[0] |= 0x00000008u;
}
inline void COMMObj::clear_has_site() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void COMMObj::clear_site() {
  if (site_ != &::google::protobuf::internal::kEmptyString) {
    site_->clear();
  }
  clear_has_site();
}
inline const ::std::string& COMMObj::site() const {
  return *site_;
}
inline void COMMObj::set_site(const ::std::string& value) {
  set_has_site();
  if (site_ == &::google::protobuf::internal::kEmptyString) {
    site_ = new ::std::string;
  }
  site_->assign(value);
}
inline void COMMObj::set_site(const char* value) {
  set_has_site();
  if (site_ == &::google::protobuf::internal::kEmptyString) {
    site_ = new ::std::string;
  }
  site_->assign(value);
}
inline void COMMObj::set_site(const char* value, size_t size) {
  set_has_site();
  if (site_ == &::google::protobuf::internal::kEmptyString) {
    site_ = new ::std::string;
  }
  site_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_site() {
  set_has_site();
  if (site_ == &::google::protobuf::internal::kEmptyString) {
    site_ = new ::std::string;
  }
  return site_;
}
inline ::std::string* COMMObj::release_site() {
  clear_has_site();
  if (site_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = site_;
    site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COMMObj::set_allocated_site(::std::string* site) {
  if (site_ != &::google::protobuf::internal::kEmptyString) {
    delete site_;
  }
  if (site) {
    set_has_site();
    site_ = site;
  } else {
    clear_has_site();
    site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string byte_data = 5;
inline bool COMMObj::has_byte_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void COMMObj::set_has_byte_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void COMMObj::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void COMMObj::clear_byte_data() {
  if (byte_data_ != &::google::protobuf::internal::kEmptyString) {
    byte_data_->clear();
  }
  clear_has_byte_data();
}
inline const ::std::string& COMMObj::byte_data() const {
  return *byte_data_;
}
inline void COMMObj::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::kEmptyString) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
}
inline void COMMObj::set_byte_data(const char* value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::kEmptyString) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
}
inline void COMMObj::set_byte_data(const char* value, size_t size) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::kEmptyString) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_byte_data() {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::kEmptyString) {
    byte_data_ = new ::std::string;
  }
  return byte_data_;
}
inline ::std::string* COMMObj::release_byte_data() {
  clear_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = byte_data_;
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COMMObj::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data_ != &::google::protobuf::internal::kEmptyString) {
    delete byte_data_;
  }
  if (byte_data) {
    set_has_byte_data();
    byte_data_ = byte_data;
  } else {
    clear_has_byte_data();
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string field_name = 6;
inline int COMMObj::field_name_size() const {
  return field_name_.size();
}
inline void COMMObj::clear_field_name() {
  field_name_.Clear();
}
inline const ::std::string& COMMObj::field_name(int index) const {
  return field_name_.Get(index);
}
inline ::std::string* COMMObj::mutable_field_name(int index) {
  return field_name_.Mutable(index);
}
inline void COMMObj::set_field_name(int index, const ::std::string& value) {
  field_name_.Mutable(index)->assign(value);
}
inline void COMMObj::set_field_name(int index, const char* value) {
  field_name_.Mutable(index)->assign(value);
}
inline void COMMObj::set_field_name(int index, const char* value, size_t size) {
  field_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::add_field_name() {
  return field_name_.Add();
}
inline void COMMObj::add_field_name(const ::std::string& value) {
  field_name_.Add()->assign(value);
}
inline void COMMObj::add_field_name(const char* value) {
  field_name_.Add()->assign(value);
}
inline void COMMObj::add_field_name(const char* value, size_t size) {
  field_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
COMMObj::field_name() const {
  return field_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
COMMObj::mutable_field_name() {
  return &field_name_;
}

// optional int32 row_begin = 7 [default = -1];
inline bool COMMObj::has_row_begin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void COMMObj::set_has_row_begin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void COMMObj::clear_has_row_begin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void COMMObj::clear_row_begin() {
  row_begin_ = -1;
  clear_has_row_begin();
}
inline ::google::protobuf::int32 COMMObj::row_begin() const {
  return row_begin_;
}
inline void COMMObj::set_row_begin(::google::protobuf::int32 value) {
  set_has_row_begin();
  row_begin_ = value;
}

// optional int32 row_size = 8 [default = -1];
inline bool COMMObj::has_row_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void COMMObj::set_has_row_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void COMMObj::clear_has_row_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void COMMObj::clear_row_size() {
  row_size_ = -1;
  clear_has_row_size();
}
inline ::google::protobuf::int32 COMMObj::row_size() const {
  return row_size_;
}
inline void COMMObj::set_row_size(::google::protobuf::int32 value) {
  set_has_row_size();
  row_size_ = value;
}

// optional string type = 9 [default = "obj"];
inline bool COMMObj::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void COMMObj::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void COMMObj::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void COMMObj::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& COMMObj::type() const {
  return *type_;
}
inline void COMMObj::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void COMMObj::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void COMMObj::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COMMObj::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* COMMObj::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void COMMObj::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace COMMObj

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_COMMObj_2eproto__INCLUDED
