// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `tmp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __tmp_h__
#define __tmp_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Printer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printer*);

class Printer2;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer2>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printer2*);

class callBack;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::callBack>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::callBack*);

class Printer3;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer3>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printer3*);

class Printf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printf*);

}

}

namespace Demo
{

class Printer;
bool operator==(const Printer&, const Printer&);
bool operator<(const Printer&, const Printer&);
::Ice::Object* upCast(::Demo::Printer*);
typedef ::IceInternal::Handle< ::Demo::Printer> PrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer> PrinterPrx;
void __patch(PrinterPtr&, const ::Ice::ObjectPtr&);

class Printer2;
bool operator==(const Printer2&, const Printer2&);
bool operator<(const Printer2&, const Printer2&);
::Ice::Object* upCast(::Demo::Printer2*);
typedef ::IceInternal::Handle< ::Demo::Printer2> Printer2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer2> Printer2Prx;
void __patch(Printer2Ptr&, const ::Ice::ObjectPtr&);

class callBack;
bool operator==(const callBack&, const callBack&);
bool operator<(const callBack&, const callBack&);
::Ice::Object* upCast(::Demo::callBack*);
typedef ::IceInternal::Handle< ::Demo::callBack> callBackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::callBack> callBackPrx;
void __patch(callBackPtr&, const ::Ice::ObjectPtr&);

class Printer3;
bool operator==(const Printer3&, const Printer3&);
bool operator<(const Printer3&, const Printer3&);
::Ice::Object* upCast(::Demo::Printer3*);
typedef ::IceInternal::Handle< ::Demo::Printer3> Printer3Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer3> Printer3Prx;
void __patch(Printer3Ptr&, const ::Ice::ObjectPtr&);

class Printf;
bool operator==(const Printf&, const Printf&);
bool operator<(const Printf&, const Printf&);
::Ice::Object* upCast(::Demo::Printf*);
typedef ::IceInternal::Handle< ::Demo::Printf> PrintfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printf> PrintfPrx;
void __patch(PrintfPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class Callback_Printer_printString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printString_Base> Callback_Printer_printStringPtr;

class Callback_Printer2_printString2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer2_printString2_Base> Callback_Printer2_printString2Ptr;

class Callback_callBack_set_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_callBack_set_Base> Callback_callBack_setPtr;

class Callback_Printer3_printString3_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer3_printString3_Base> Callback_Printer3_printString3Ptr;

class Callback_Printer3_setInt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer3_setInt_Base> Callback_Printer3_setIntPtr;

class Callback_Printer3_setCall_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer3_setCall_Base> Callback_Printer3_setCallPtr;

class Callback_Printf_vison_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printf_vison_Base> Callback_Printf_visonPtr;

}

namespace IceProxy
{

namespace Demo
{

class Printer : virtual public ::IceProxy::Ice::Object
{
public:

    void printString(const ::std::string& s)
    {
        printString(s, 0);
    }
    void printString(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        printString(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString(s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString(s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s)
    {
        return begin_printString(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return begin_printString(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s, const ::Demo::Callback_Printer_printStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& s, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(s, &__ctx, __del, __cookie);
    }

    void end_printString(const ::Ice::AsyncResultPtr&);
    
private:

    void printString(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printString(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_twoway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_oneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchOneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_datagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchDatagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Printer2 : virtual public ::IceProxy::Ice::Object
{
public:

    void printString2(const ::std::string& s)
    {
        printString2(s, 0);
    }
    void printString2(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        printString2(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printString2(const ::std::string& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString2(s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printString2(const ::std::string& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString2(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString2(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString2(s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString2(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString2(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s)
    {
        return begin_printString2(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return begin_printString2(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString2(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString2(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s, const ::Demo::Callback_Printer2_printString2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString2(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString2(const ::std::string& s, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer2_printString2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString2(s, &__ctx, __del, __cookie);
    }

    void end_printString2(const ::Ice::AsyncResultPtr&);
    
private:

    void printString2(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printString2(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printer2> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_twoway() const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_oneway() const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_batchOneway() const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_datagram() const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_batchDatagram() const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer2> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printer2*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class callBack : virtual public ::IceProxy::Ice::Object
{
public:

    void set(::Ice::Int i)
    {
        set(i, 0);
    }
    void set(::Ice::Int i, const ::Ice::Context& __ctx)
    {
        set(i, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_set(::Ice::Int i, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_set(i, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_set(::Ice::Int i, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_set(i, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_set(::Ice::Int i, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_set(i, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_set(::Ice::Int i, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_set(i, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i)
    {
        return begin_set(i, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i, const ::Ice::Context& __ctx)
    {
        return begin_set(i, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(i, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i, const ::Demo::Callback_callBack_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(::Ice::Int i, const ::Ice::Context& __ctx, const ::Demo::Callback_callBack_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(i, &__ctx, __del, __cookie);
    }

    void end_set(const ::Ice::AsyncResultPtr&);
    
private:

    void set(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_set(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<callBack> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_secure(bool __secure) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_twoway() const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_oneway() const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_batchOneway() const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_datagram() const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_batchDatagram() const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_compress(bool __compress) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_timeout(int __timeout) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<callBack> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<callBack*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Printer3 : virtual public ::IceProxy::Demo::Printer,
                 virtual public ::IceProxy::Demo::Printer2
{
public:

    void printString3(const ::std::string& s)
    {
        printString3(s, 0);
    }
    void printString3(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        printString3(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printString3(const ::std::string& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString3(s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printString3(const ::std::string& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString3(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString3(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString3(s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString3(const ::std::string& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString3(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s)
    {
        return begin_printString3(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return begin_printString3(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString3(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString3(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s, const ::Demo::Callback_Printer3_printString3Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString3(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString3(const ::std::string& s, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer3_printString3Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString3(s, &__ctx, __del, __cookie);
    }

    void end_printString3(const ::Ice::AsyncResultPtr&);
    
private:

    void printString3(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printString3(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInt(::Ice::Int j)
    {
        setInt(j, 0);
    }
    void setInt(::Ice::Int j, const ::Ice::Context& __ctx)
    {
        setInt(j, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInt(::Ice::Int j, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInt(j, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInt(::Ice::Int j, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInt(j, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInt(::Ice::Int j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInt(j, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInt(::Ice::Int j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInt(j, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j)
    {
        return begin_setInt(j, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j, const ::Ice::Context& __ctx)
    {
        return begin_setInt(j, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInt(j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInt(j, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j, const ::Demo::Callback_Printer3_setIntPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInt(j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int j, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer3_setIntPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInt(j, &__ctx, __del, __cookie);
    }

    void end_setInt(const ::Ice::AsyncResultPtr&);
    
private:

    void setInt(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInt(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCall(const ::Demo::callBackPrx& cb)
    {
        setCall(cb, 0);
    }
    void setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx)
    {
        setCall(cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCall(const ::Demo::callBackPrx& cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCall(cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCall(const ::Demo::callBackPrx& cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCall(cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCall(cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCall(cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb)
    {
        return begin_setCall(cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx)
    {
        return begin_setCall(cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCall(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCall(cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb, const ::Demo::Callback_Printer3_setCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCall(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx& cb, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer3_setCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCall(cb, &__ctx, __del, __cookie);
    }

    void end_setCall(const ::Ice::AsyncResultPtr&);
    
private:

    void setCall(const ::Demo::callBackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCall(const ::Demo::callBackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printer3> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_twoway() const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_oneway() const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_batchOneway() const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_datagram() const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_batchDatagram() const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer3> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printer3*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Printf : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string vison()
    {
        return vison(0);
    }
    ::std::string vison(const ::Ice::Context& __ctx)
    {
        return vison(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_vison(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_vison(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_vison(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_vison(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_vison(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_vison(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_vison(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_vison(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_vison(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PrintfPrx __proxy = ::Demo::PrintfPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_vison(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_vison(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_vison()
    {
        return begin_vison(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_vison(const ::Ice::Context& __ctx)
    {
        return begin_vison(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_vison(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_vison(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_vison(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_vison(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_vison(const ::Demo::Callback_Printf_visonPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_vison(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_vison(const ::Ice::Context& __ctx, const ::Demo::Callback_Printf_visonPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_vison(&__ctx, __del, __cookie);
    }

    ::std::string end_vison(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string vison(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_vison(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_twoway() const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_oneway() const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_batchOneway() const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_datagram() const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_batchDatagram() const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Printer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Printer2 : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void printString2(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class callBack : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void set(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Printer3 : virtual public ::IceDelegate::Demo::Printer,
                 virtual public ::IceDelegate::Demo::Printer2
{
public:

    virtual void printString3(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInt(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCall(const ::Demo::callBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Printf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string vison(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printer2 : virtual public ::IceDelegate::Demo::Printer2,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void printString2(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class callBack : virtual public ::IceDelegate::Demo::callBack,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void set(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printer3 : virtual public ::IceDelegate::Demo::Printer3,
                 virtual public ::IceDelegateM::Demo::Printer,
                 virtual public ::IceDelegateM::Demo::Printer2
{
public:

    virtual void printString3(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInt(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCall(const ::Demo::callBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printf : virtual public ::IceDelegate::Demo::Printf,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string vison(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printer2 : virtual public ::IceDelegate::Demo::Printer2,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void printString2(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class callBack : virtual public ::IceDelegate::Demo::callBack,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void set(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printer3 : virtual public ::IceDelegate::Demo::Printer3,
                 virtual public ::IceDelegateD::Demo::Printer,
                 virtual public ::IceDelegateD::Demo::Printer2
{
public:

    virtual void printString3(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInt(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCall(const ::Demo::callBackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Printf : virtual public ::IceDelegate::Demo::Printf,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string vison(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Printer : virtual public ::Ice::Object
{
public:

    typedef PrinterPrx ProxyType;
    typedef PrinterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void printString(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Printer2 : virtual public ::Ice::Object
{
public:

    typedef Printer2Prx ProxyType;
    typedef Printer2Ptr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void printString2(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printString2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Printer2& l, const Printer2& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer2& l, const Printer2& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class callBack : virtual public ::Ice::Object
{
public:

    typedef callBackPrx ProxyType;
    typedef callBackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void set(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___set(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const callBack& l, const callBack& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const callBack& l, const callBack& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Printer3 : virtual public ::Demo::Printer,
                 virtual public ::Demo::Printer2
{
public:

    typedef Printer3Prx ProxyType;
    typedef Printer3Ptr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void printString3(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printString3(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInt(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCall(const ::Demo::callBackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCall(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Printer3& l, const Printer3& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer3& l, const Printer3& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Printf : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef PrintfPrx ProxyType;
    typedef PrintfPtr PointerType;

    Printf()
    {
    }

    Printf(const ::Demo::PrinterPtr& __ice_prt1, const ::Demo::Printer2Ptr& __ice_ptr2) :
        prt1(__ice_prt1),
        ptr2(__ice_ptr2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::std::string vison(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___vison(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Demo::PrinterPtr prt1;

    ::Demo::Printer2Ptr ptr2;
};

inline bool operator==(const Printf& l, const Printf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printf& l, const Printf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Printer_printString : public Callback_Printer_printString_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printString : public Callback_Printer_printString_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer2_printString2 : public Callback_Printer2_printString2_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer2_printString2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer2_printString2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer2_printString2<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer2_printString2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer2_printString2<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer2_printString2 : public Callback_Printer2_printString2_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer2_printString2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer2_printString2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer2_printString2<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer2_printString2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer2_printString2Ptr
newCallback_Printer2_printString2(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer2_printString2<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_callBack_set : public Callback_callBack_set_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_callBack_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_callBack_setPtr
newCallback_callBack_set(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_callBack_set<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_callBack_setPtr
newCallback_callBack_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_callBack_set<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_callBack_setPtr
newCallback_callBack_set(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_callBack_set<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_callBack_setPtr
newCallback_callBack_set(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_callBack_set<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_callBack_set : public Callback_callBack_set_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_callBack_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_callBack_setPtr
newCallback_callBack_set(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_callBack_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_callBack_setPtr
newCallback_callBack_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_callBack_set<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_callBack_setPtr
newCallback_callBack_set(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_callBack_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_callBack_setPtr
newCallback_callBack_set(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_callBack_set<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer3_printString3 : public Callback_Printer3_printString3_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer3_printString3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_printString3<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_printString3<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_printString3<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_printString3<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer3_printString3 : public Callback_Printer3_printString3_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer3_printString3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_printString3<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_printString3<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_printString3<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_printString3Ptr
newCallback_Printer3_printString3(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_printString3<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer3_setInt : public Callback_Printer3_setInt_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer3_setInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setInt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setInt<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setInt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setInt<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer3_setInt : public Callback_Printer3_setInt_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer3_setInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setInt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setInt<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setInt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setIntPtr
newCallback_Printer3_setInt(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setInt<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer3_setCall : public Callback_Printer3_setCall_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer3_setCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setCall<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer3_setCall<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer3_setCall : public Callback_Printer3_setCall_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer3_setCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer3_setCallPtr
newCallback_Printer3_setCall(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer3_setCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printf_vison : public Callback_Printf_vison_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Printf_vison(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrintfPrx __proxy = ::Demo::PrintfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_vison(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Printf_visonPtr
newCallback_Printf_vison(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printf_vison<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printf_visonPtr
newCallback_Printf_vison(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printf_vison<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printf_vison : public Callback_Printf_vison_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Printf_vison(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrintfPrx __proxy = ::Demo::PrintfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_vison(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Printf_visonPtr
newCallback_Printf_vison(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printf_vison<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printf_visonPtr
newCallback_Printf_vison(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printf_vison<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
